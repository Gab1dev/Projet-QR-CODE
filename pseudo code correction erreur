import numpy as np

# Galois Field (GF) operations
def gf_mult(x, y, p=0x11d):
    """Multiplie deux éléments dans GF(2^8)"""
    result = 0
    while y > 0:
        if y & 1:
            result ^= x
        x <<= 1
        if x & 0x100:
            x ^= p
        y >>= 1
    return result

def gf_pow(x, exp, p=0x11d):
    """Élève un élément à une puissance dans GF(2^8)"""
    result = 1
    for _ in range(exp):
        result = gf_mult(result, x, p)
    return result

# Reed-Solomon Encoder
def reed_solomon_encode(data, n, k):
    """Encode les données avec Reed-Solomon"""
    # Coefficients du polynôme générateur
    generator = [1]
    for i in range(n - k):
        generator = np.convolve(generator, [1, gf_pow(2, i)])
    
    # Ajout de zéros pour le polynôme de données
    data_poly = np.array(data + [0] * (n - k))
    
    # Division polynomiale
    remainder = np.polydiv(data_poly, generator)[1]
    
    # Ajout des symboles de redondance
    return data + remainder.astype(int).tolist()

# Reed-Solomon Decoder
def reed_solomon_decode(encoded_data, n, k):
    """Décode les données avec Reed-Solomon"""
    # Pour simplifier, nous ne corrigeons pas les erreurs ici
    return encoded_data[:k]

# Exemple d'utilisation
if __name__ == "__main__":
    data = [1, 2, 3, 4]  # Données à encoder
    n = 7  # Longueur totale du code
    k = 4  # Longueur des données

    encoded_data = reed_solomon_encode(data, n, k)
    print("Données encodées :", encoded_data)

    decoded_data = reed_solomon_decode(encoded_data, n, k)
    print("Données décodées :", decoded_data)
